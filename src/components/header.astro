---
import { Icon } from "astro-icon";
import coreImage from "~/assets/music.png";
import ThemeSwitcher from "~/components/theme-switcher.astro";
import type { NavItem } from "~/types";
import logo from "~/images/logo-noslogan.png";

const navItems: Array<NavItem> = [ // py-4 text-center text-xl
  { title: "The Journey", url: "/#intro", target: "_self", className: "text-xl md:text-sm py-4"},
  { title: "Learnings", url: "/#features", target: "_self", className: "text-xl md:text-sm py-4"},
  { title: "Facilitators", url: "/#team", target: "_self", className: "text-xl md:text-sm py-4"},
  { title: "Venue", url: "/#venue", target: "_self", className: "text-xl md:text-sm py-4"},
  { title: "Contact us", url: "https://us17.list-manage.com/contact-form?u=6a6529403b261e63b16bb75ba&form_id=877821e585acdd9310ee07a997ca41e8", target: "_blank", className: "text-xl md:text-sm py-4" },
  { title: "Buy tickets", url: "https://www.tickettailor.com/events/transformationaltango/989841", target: "_self", className: "btn btn-standard text-white text-center !py-2 !px-4 rounded-full !text-xl md:!text-sm"},
];
---

<header
  id="page-header"
  class="absolute z-20 flex w-full items-center justify-between border-b border-transparent px-8 py-4 text-white"
>
  <a class="flex gap-3 hover:!text-default" href="/">
    <h1 class="sr-only">Transformational Tango</h1>
    <img id="header-home-icon" src={logo.src} alt="" class="h-10">
    <div id="header-home-words" class="hidden h-4 font-['Milonga']"><h1>Transformational Tango</h1><span class="tagline">dance, connect, evolve</span></div>
  </a>
  <div>
    <div class="flex items-center gap-6">
      <nav class="hidden md:block">
        <ul class="flex items-center gap-6">
          {
            navItems.map(({ title, url, target, className, }) => (
              <li>
                <a class={className} href={url} target={target}>
                  {title}
                </a>
              </li>
            ))
          }
        </ul>
      </nav>
      <button
        id="open-nav-button"
        type="button"
        class="btn md:hidden"
        aria-label="Navigation"
      >
        <Icon pack="mdi" name="menu" class="h-8" />
      </button>
      <ThemeSwitcher />
    </div>
    <div id="menu-modal" class="modal hidden" aria-hidden="true">
      <div class="fixed inset-0 bg-default px-8 py-4 text-default">
        <div class="space-y-4" role="dialog" aria-modal="true">
          <header class="text-right">
            <button
              id="close-nav-button"
              type="button"
              class="btn"
              aria-label="Close navigation"
            >
              <Icon pack="mdi" name="close" class="h-8" />
            </button>
          </header>
          <div class="flex justify-center">
            <img id="header-home-icon" src={logo.src} alt="" class="h-10">
          </div>
          <nav>
            <ul class="flex flex-col items-center gap-8">
              {
                navItems.map(({ title, url, className }) => (
                  <li>
                    <a class={className} href={url}>
                      {title}
                    </a>
                  </li>
                ))
              }
            </ul>
          </nav>
        </div>
      </div>
    </div>
  </div>
</header>

<script>
  import MicroModal from "micromodal";
  import invariant from "tiny-invariant";

  const menuModalId = "menu-modal";

  const header = document.querySelector("#page-header") as HTMLElement;
  const headerHomeIcon = document.querySelector("#header-home-icon") as HTMLElement;
  const headerHomeWords = document.querySelector("#header-home-words") as HTMLElement;
  const page = document.documentElement;
  const menu = document.querySelector(`#${menuModalId} ul`);
  const openNavButton = document.querySelector("#open-nav-button");
  const closeNavButton = document.querySelector("#close-nav-button");

  invariant(header, "header should not be null");
  invariant(menu, "menu should not be null");
  invariant(openNavButton, "openNavButton should not be null");
  invariant(closeNavButton, "closeNavButton should not be null");

  const openMenu = () => {
    MicroModal.show(menuModalId, { disableScroll: true });
  };

  const closeMenu = () => {
    MicroModal.close(menuModalId);
  };

  openNavButton.addEventListener("click", openMenu);
  closeNavButton.addEventListener("click", closeMenu);

  document.addEventListener("scroll", () => {
    const d = page.clientHeight - page.scrollTop - header.offsetHeight;
    header.classList.toggle("fixed-header", d < 0);
    headerHomeIcon.classList.toggle("sm:block", d < 0);
    headerHomeWords.classList.toggle("lg:block", d < 0);
  });

  menu.addEventListener("click", (event) => {
    if ((event.target as HTMLElement).tagName === "A") {
      closeMenu();
    }
  });
</script>

<noscript>
  <style>
    #open-nav-button {
      display: none;
    }
  </style>
</noscript>

<style>
  .fixed-header {
    @apply fixed bottom-auto top-0;
    @apply border-default bg-default text-default;
  }
  .modal.is-open {
    @apply block;
  }
  .tagline {
    display: block;
    color: #ED768D;
    font-size: 16px;
    margin-top: -6px;
    text-align: right;
    margin-right: 1px;
}
</style>
